CREATE TABLE [dbo].[Region] (
	[State] CHAR(2) NOT NULL,
	[Zip] VARCHAR(10) NOT NULL,
    CONSTRAINT [UIX_Region] UNIQUE ([State],[Zip])
);

CREATE TABLE [dbo].[Address] (
	[Id] INT IDENTITY(1,1) NOT NULL,
	[AddressType] INT NULL,
	[Line1] VARCHAR(50) NOT NULL,
	[Line2] VARCHAR(50) NULL,
	[City] VARCHAR(60) NOT NULL,
	[State] CHAR(2) NOT NULL,
	[Zip] VARCHAR(10) NOT NULL,
	[DateCreated] DATETIME NOT NULL DEFAULT (GETDATE()),
	[DateUpdated] DATETIME NOT NULL DEFAULT (GETDATE()),
	CONSTRAINT [FK_Address_Region] FOREIGN KEY([State],[Zip]) REFERENCES [dbo].[Region] ([State],[Zip]),
	CONSTRAINT [PK_Address] PRIMARY KEY CLUSTERED ([Id])
);

CREATE INDEX [IX_City] ON [dbo].[Address] ([City]);
GO

CREATE TRIGGER [dbo].[TR_Address_DateUpdated]
	ON [dbo].[Address]
	AFTER UPDATE 
	AS 
	IF NOT UPDATE([DateUpdated])
		UPDATE [dbo].[Address] 
		SET [DateUpdated] = GETDATE()
		FROM inserted i
		INNER JOIN [dbo].[Address] a ON a.Id = i.Id
GO

CREATE TABLE [dbo].[Person](
	[Id] INT IDENTITY(1,1) NOT NULL,
	[FirstName] VARCHAR(20) NOT NULL,
	[LastName] VARCHAR(20) NOT NULL,
	[BirthDate] DATE NULL,
	[GenderType] INT NOT NULL,
	[CreditLimit] INT NULL,
	[YearOfLastCreditLimitReview] INT NULL,
	[RegistrationDate] DATETIME NOT NULL DEFAULT (GETDATE()),
	[LastLoginDate] DATETIME NULL,
	[DateCreated] DATETIME NOT NULL DEFAULT (GETDATE()),
	[DateUpdated] DATETIME NOT NULL DEFAULT (GETDATE()),
	CONSTRAINT [PK_Person] PRIMARY KEY CLUSTERED ([Id])
);
GO

CREATE INDEX [IX_LastName_FirstName] ON [dbo].[Person] ([LastName], [FirstName]);
GO

CREATE INDEX [IX_LastLoginDate] ON [dbo].[Person] ([LastLoginDate] DESC);
GO

CREATE TRIGGER [dbo].[TR_Person_DateUpdated]
	ON [dbo].[Person]
	AFTER UPDATE 
	AS 
	IF NOT UPDATE([DateUpdated])
		UPDATE [dbo].[Person] 
		SET [DateUpdated] = GETDATE()
		FROM inserted i
		INNER JOIN [dbo].[Person] a ON a.Id = i.Id
GO

CREATE TABLE [dbo].[Person_Address] (
	[Id] INT IDENTITY(1,1) NOT NULL,
	[PersonId] INT NOT NULL,
	[AddressId] INT NOT NULL,
	[DateCreated] DATETIME NOT NULL DEFAULT (GETDATE()),
	CONSTRAINT [PK_Person_Address] PRIMARY KEY CLUSTERED ([Id]),
	CONSTRAINT [FK_Person_Address_Address] FOREIGN KEY([AddressId]) REFERENCES [dbo].[Address] ([Id]),
	CONSTRAINT [FK_Person_Address_Person] FOREIGN KEY([PersonId]) REFERENCES [dbo].[Person] ([Id])
);
GO

CREATE TABLE [dbo].[Product](
	[Id] INT IDENTITY(1,1) NOT NULL,
	[ProductCategoryType] INT NULL,
	[Name] VARCHAR(80) NOT NULL,
	[Description] NVARCHAR(2000) NULL,
	[ListPrice] MONEY NOT NULL,
	[Price] MONEY NOT NULL,
	[Quantity] INT NOT NULL,
	[Image] VARBINARY(MAX) NULL,
	[Height] DECIMAL(4, 1) NULL,
	[Width] DECIMAL(4, 1) NULL,
	[Depth] DECIMAL(4, 1) NULL,
	[Weight] DECIMAL(4, 1) NULL,
	[ShippingWeight] DECIMAL(4, 1) NOT NULL,
	[ValidStartTimeOfDayForPurchase] TIME NULL,
	[ValidEndTimeOfDayForPurchase] TIME NULL,
	[DateCreated] DATETIME NOT NULL CONSTRAINT [DF_Product_DateCreated] DEFAULT (GETDATE()),
	[DateUpdated] DATETIME NOT NULL CONSTRAINT [DF_Product_DateUpdated] DEFAULT (GETDATE()),
	CONSTRAINT [PK_Product] PRIMARY KEY CLUSTERED ([Id])
);
GO

CREATE TRIGGER [dbo].[TR_Product_DateUpdated]
	ON [dbo].[Product]
	AFTER UPDATE 
	AS 
	IF NOT UPDATE([DateUpdated])
		UPDATE [dbo].[Product] 
		SET [DateUpdated] = GETDATE()
		FROM inserted i
		INNER JOIN [dbo].[Product] a ON a.Id = i.Id
GO

CREATE TABLE [dbo].[Purchase](
	[Id] INT IDENTITY(1,1) NOT NULL,
	[PersonId] INT NOT NULL,
	[OrderNumber] VARCHAR(20) NOT NULL,
	[TotalPurchaseQuantity] INT NOT NULL,
	[TotalPurchaseAmount] MONEY NOT NULL,
	[PurchaseDate] DATETIME NOT NULL,
	[ShipDate] DATETIME NULL,
	[ExpectedDeliveryDate] DATETIME NULL,
	[TrackingIdentifier] UNIQUEIDENTIFIER NULL,
	[PaymentMethodType] VARCHAR(20) NOT NULL,
	[PaymentSourceType] VARCHAR(20) NULL,
	[DateCreated] DATETIME NOT NULL CONSTRAINT [DF_Purchase_DateCreated] DEFAULT (GETDATE()),
	[DateUpdated] DATETIME NOT NULL CONSTRAINT [DF_Purchase_DateUpdated] DEFAULT (GETDATE()),
	CONSTRAINT [PK_Purchase] PRIMARY KEY CLUSTERED ([Id]),
	CONSTRAINT [FK_Purchase_Person] FOREIGN KEY([PersonId]) REFERENCES [dbo].[Person] ([Id])
);
GO

CREATE TRIGGER [dbo].[TR_Purchase_DateUpdated]
	ON [dbo].[Purchase]
	AFTER UPDATE 
	AS 
	IF NOT UPDATE([DateUpdated])
		UPDATE [dbo].[Purchase] 
		SET [DateUpdated] = GETDATE()
		FROM inserted i
		INNER JOIN [dbo].[Purchase] a ON a.Id = i.Id
GO

CREATE TABLE [dbo].[PurchaseLine](
	[Id] INT IDENTITY(1,1) NOT NULL,
	[PurchaseId] INT NOT NULL,
	[ProductId] INT NOT NULL,
	[PurchasePrice] DECIMAL(12, 2) NOT NULL,
	[Quantity] INT NOT NULL,
	[DateCreated] DATETIME NOT NULL CONSTRAINT [DF_PurchaseLine_DateCreated] DEFAULT (GETDATE()),
	[DateUpdated] DATETIME NOT NULL CONSTRAINT [DF_PurchaseLine_DateUpdated] DEFAULT (GETDATE()),
	CONSTRAINT [PK_PurchaseLine] PRIMARY KEY CLUSTERED ([Id]),
	CONSTRAINT [FK_PurchaseLine_Purchase] FOREIGN KEY([PurchaseId]) REFERENCES [dbo].[Purchase] ([Id]),
	CONSTRAINT [FK_PurchaseLine_Product] FOREIGN KEY([ProductId]) REFERENCES [dbo].[Product] ([Id])
);
GO

CREATE TRIGGER [dbo].[TR_PurchaseLine_DateUpdated]
	ON [dbo].[PurchaseLine]
	AFTER UPDATE 
	AS 
	IF NOT UPDATE([DateUpdated])
		UPDATE [dbo].[PurchaseLine] 
		SET [DateUpdated] = GETDATE()
		FROM inserted i
		INNER JOIN [dbo].[PurchaseLine] a ON a.Id = i.Id
GO

CREATE TABLE [dbo].[AccessAuditLog](
	[Id] INT IDENTITY(1,1) NOT NULL,
	[PersonId] INT NOT NULL,
	[AccessResult] INT NOT NULL,
	[DateCreated] DATETIME NOT NULL DEFAULT (GETDATE()),
	CONSTRAINT [PK_AccessAuditLog] PRIMARY KEY CLUSTERED ([Id])
);
GO

CREATE SCHEMA [unit_test]
GO

CREATE TYPE [unit_test].[MyType] FROM [bigint] NOT NULL
GO

CREATE TABLE [unit_test].[DataType](
	[Bit] BIT NOT NULL,
	[NullableBit] BIT NULL,
	[DateTime] DATETIME NOT NULL,
	[NullableDateTime] DATETIME NULL,
	[SmallDateTime] SMALLDATETIME NOT NULL,
	[NullableSmallDateTime] SMALLDATETIME NULL,
	[DateTime2] DATETIME2 NOT NULL,
	[NullableDateTime2] DATETIME2 NULL,
	[DateTimeOffset] DATETIMEOFFSET NOT NULL,
	[NullableDateTimeOffset] DATETIMEOFFSET NULL,
	[Date] DATE NOT NULL,
	[NullableDate] DATE NULL,
	[Timestamp] TIMESTAMP NOT NULL,
	[Time] TIME NOT NULL,
	[NullableTime] TIME NULL,
	[VarChar] VARCHAR(20) NOT NULL,
	[NullableVarChar] VARCHAR(20) NULL,
	[Char] CHAR(20) NOT NULL,
	[NullableChar] CHAR(20) NULL,
	[NVarChar] NVARCHAR(20) NOT NULL,
	[NullableNVarChar] NVARCHAR(20) NULL,
	[NChar] NCHAR(20) NOT NULL,
	[NullableNChar] NCHAR(20) NULL,
	[TinyInt] TINYINT NOT NULL,
	[NullableTinyInt] TINYINT NULL,
	[SmallInt] SMALLINT NOT NULL,
	[NullableSmallInt] SMALLINT NULL,
	[Int] INT NOT NULL,
	[NullableInt] INT NULL,
	[BigInt] BIGINT NOT NULL,
	[NullableBigInt] BIGINT NULL,
	[Money] MONEY NOT NULL,
	[NullableMoney] MONEY NULL,
	[SmallMoney] SMALLMONEY NOT NULL,
	[NullableSmallMoney] SMALLMONEY NULL,
	[Decimal] DECIMAL(5,4) NOT NULL,
	[NullableDecimal] DECIMAL(5,4) NULL,
	[Float] FLOAT NOT NULL,
	[NullableFloat] FLOAT NULL,
	[Real] REAL NOT NULL,
	[NullableReal] REAL NULL,
	[Uniqueidentifier] UNIQUEIDENTIFIER NOT NULL,
	[NullableUniqueidentifier] UNIQUEIDENTIFIER NULL,
	[Binary] BINARY NOT NULL,
	[NullableBinary] BINARY NULL,
	[VarBinary] VARBINARY(20) NOT NULL,
	[NullableVarBinary] VARBINARY(20) NULL,
	[Image] IMAGE NOT NULL,
	[NullableImage] IMAGE NULL,
	[Text] TEXT NOT NULL,
	[NullableText] TEXT NULL,
	[NText] NTEXT NOT NULL,
	[NullableNText] NTEXT NULL,
	[HierarchyId] [hierarchyid] NOT NULL,
	[NullableHierarchyId] [hierarchyid] NULL,
	[Geometry] [geometry] NOT NULL,
	[NullableGeometry] [geometry] NULL,
	[Geography] [geography] NOT NULL,
	[NullableGeography] [geography] NULL,
	[Xml] [xml] NOT NULL,
	[NullableXml] [xml] NULL,
	[MyType] [unit_test].[MyType] NOT NULL,
	[NullableMyType] [unit_test].[MyType] NULL
);
GO

CREATE SCHEMA [sec]
GO

CREATE TABLE [sec].[Person](
	[Id] INT NOT NULL,
	[SSN] CHAR(11) NOT NULL,
	[DateCreated] DATETIME NOT NULL DEFAULT (GETDATE()),
	[DateUpdated] DATETIME NOT NULL DEFAULT (GETDATE()),
	CONSTRAINT [PK_Person] PRIMARY KEY CLUSTERED ([Id])
);
GO

CREATE TRIGGER [sec].[TR_Person_DateUpdated]
	ON [sec].[Person]
	AFTER UPDATE 
	AS 
	IF NOT UPDATE([DateUpdated])
		UPDATE [sec].[Person] 
		SET [DateUpdated] = GETDATE()
		FROM inserted i
		INNER JOIN [sec].[Person] a ON a.Id = i.Id
GO

CREATE VIEW [sec].[PersonView]
AS
SELECT    
	sec.Person.Id
FROM      
	sec.Person
GROUP BY 
	sec.Person.Id;
GO

CREATE PROCEDURE [sec].[Procedure_With_In] (
	@P1_IN INT
)
AS
BEGIN
	SELECT 
		TOP(1) *
	FROM 
		Person
	WHERE 
		Person.Id = @P1_IN;
END
GO

CREATE PROCEDURE [sec].[Procedure_With_Multiple_In] (
	@P1_IN INT,
	@P2_IN INT
)
AS
BEGIN
	SELECT 
		TOP(1) *
	FROM 
		Person
	WHERE 
		Person.Id = @P1_IN;
END
GO

CREATE PROCEDURE [sec].[Procedure_With_Out] (
	@P1_OUT INT OUTPUT
)
AS
BEGIN
	SELECT 
		@P1_OUT = Person.Id
	FROM 
		Person
	WHERE 
		Person.Id = 1;
END
GO

CREATE PROCEDURE [sec].[Procedure_With_In_And_Out] (
	@P1_IN INT,
	@P2_OUT INT OUTPUT
)
AS
BEGIN
	SELECT 
		@P2_OUT = Person.Id
	FROM 
		Person
	WHERE 
		Person.Id = @P1_IN;
END
GO

CREATE VIEW [dbo].[PersonTotalPurchasesView]
AS
SELECT    
	[dbo].[Person].[Id], 
	SUM([dbo].[Purchase].[TotalPurchaseAmount]) AS [TotalAmount],
	COUNT([dbo].[Purchase].[Id]) AS [TotalCount]
FROM      
	[dbo].[Person] 
	INNER JOIN [dbo].[Purchase] ON [dbo].[Purchase].[PersonId] = [dbo].[Person].[Id]
GROUP BY 
	[dbo].[Person].[Id]
GO

CREATE PROCEDURE [dbo].[Procedure_With_In] (
	@P1_IN INT
)
AS
BEGIN
	SELECT 
		TOP(1) *
	FROM 
		Person
	WHERE 
		Person.Id = @P1_IN;
END
GO

CREATE PROCEDURE [dbo].[Procedure_With_Multiple_In] (
	@P1_IN INT,
	@P2_IN INT
)
AS
BEGIN
	SELECT 
		TOP(1) *
	FROM 
		Person
	WHERE 
		Person.Id = @P1_IN;
END
GO

CREATE PROCEDURE [dbo].[Procedure_With_Out] (
	@P1_OUT INT OUTPUT
)
AS
BEGIN
	SELECT 
		@P1_OUT = Person.Id
	FROM 
		Person
	WHERE 
		Person.Id = 1;
END
GO

CREATE PROCEDURE [dbo].[Procedure_With_In_And_Out] (
	@P1_IN INT,
	@P2_OUT INT OUTPUT
)
AS
BEGIN
	SELECT 
		@P2_OUT = Person.Id
	FROM 
		Person
	WHERE 
		Person.Id = @P1_IN;
END
GO

